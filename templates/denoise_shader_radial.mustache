vulkano_shaders::shader! {
{{#if compute}}
ty: "compute",
{{else}}
ty: "fragment",
{{/if}}
src: "
#version 450

// Original code by Michele Morrone me@michelemorrone.eu / brutpitt@gmail.com
// https://github.com/BrutPitt/glslSmartDeNoise/blob/master/Shaders/frag.glsl
// This software is distributed under the terms of the BSD 2-Clause license

layout(set = 0, binding = 0) uniform sampler2D image_in;
layout(set = 0, binding = 1, r32f) uniform restrict image2D image_inter_res;
{{#if compute}}
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(set = 0, binding = 2, {{{output_format}}}) uniform writeonly restrict {{#if is_int_type}}u{{/if}}image2D image_out;
{{else}}
layout(location = 0) out {{{output_t}}} out_result;
{{/if}}

#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439  // 1.0/SQRT_OF_2PI
#define INV_PI          0.31830988618379067153776752674503
#define RAD             9
const float EPSILON = 1e-10;
const float PI = 3.1415926535897932384626433832795;
const float PI_2 = 1.57079632679489661923;
const float PI_4 = 0.785398163397448309616;

float PHI = (1.0+sqrt(5.0))/2.0;

layout(push_constant) uniform Parameters {
    uint Width;
    uint Height;
    float sigma;
    float kSigma;
    float threshold;
} params;

vec2 RGBtoHV(in vec3 rgb)
{
    // RGB [0..1] to Hue-Value [0..1]
    // Based on work by Sam Hocevar and Emil Persson
    vec4 p = (rgb.g < rgb.b) ? vec4(rgb.bg, -1., 2. / 3.) : vec4(rgb.gb, 0., -1. / 3.);
    vec4 q = (rgb.r < p.x) ? vec4(p.xyw, rgb.r) : vec4(rgb.r, p.yzx);
    float c = q.x - min(q.w, q.y);
    float h = abs((q.w - q.y) / (6. * c + EPSILON) + q.z);
    return vec2(h, q.x);
}

vec2 diff_hv(vec2 a, vec2 b) {
    vec2 res = abs(a-b);
    res.x = min(1.0-res.x, res.x);
    return res;
}

float powdot(in vec2 data_rgb, in vec2 p) {
    vec2 powered = pow(abs(data_rgb), p);
    return powered.x + powered.y;
}
float powdot(in vec3 data_rgb, in vec3 p) {
    vec3 powered = pow(abs(data_rgb), p);
    return powered.r + powered.g + powered.b;
}
float powdot(in vec4 data_rgba, in vec4 p) {
    vec4 powered = pow(abs(data_rgba), p);
    return powered.r + powered.g + powered.b + powered.a;
}
float powdot(in vec2 data_rgb, in float p) {
    return powdot(abs(data_rgb), vec2(p,p));
}
float powdot(in vec3 data_rgb, in float p) {
    return powdot(abs(data_rgb), vec3(p,p,p));
}
float powdot(in vec4 data_rgba, in float p) {
    return powdot(abs(data_rgba), vec4(p,p,p,p));
}

void main() {
    vec2 size = vec2(textureSize(image_in, 0));
    vec2 uv = vec2({{#if compute}}gl_GlobalInvocationID{{else}}gl_FragCoord{{/if}}.xy) / size; //wSize in original code
    float radius = round(params.kSigma*params.sigma);
    float radQ = radius * radius;

    float invSigmaQx2 = .5 / (params.sigma * params.sigma);      // 1.0 / (sigma^2 * 2.0)
    float invSigmaQx2PI = INV_PI * invSigmaQx2;    // // 1/(2 * PI * sigma^2)

    float invThresholdSqx2 = .5 / (params.threshold * params.threshold);     // 1.0 / (params.sigma^2 * 2.0)
    float invThresholdSqrt2PI = INV_SQRT_OF_2PI / params.threshold;   // 1.0 / (sqrt(2*PI) * params.sigma)

{{#if max_val}}
    const float max_value = float({{{max_val}}});
{{/if}}
    const {{{processing_t}}} centrPx = texture(image_in, uv).{{{swizzle_vec}}}{{#if max_val}} / max_value {{/if}};
{{#if is_hsv}}
    const vec2 centrPxHv = RGBtoHV(centrPx.rgb);
{{/if}}

    float perimeter = ceil(2*PI*radius);
    float step = 1.0 / radius;

    vec2 d;
    float min_diff = 9999999.0;
    float max_diff = 0.0;
    float best_i = 0.0;
{{#if is_hsv}}
    vec2 pw = vec2(2.25, 0.75);
{{else}}
    float pw = 2.0;
{{/if}}
    float small_radius = 7.0;
    for(float i=0; i < perimeter; i+=1.5) {
        float cosi = cos(i*step);
        float sini = sin(i*step);
        float diffsum = 0.0;
        float blursum = 0.0;
        float dr = 1.0;
        for(float r=1; r< small_radius; r+=dr) {
            d.x = r * cosi;
            d.y = r * sini;
            {{{processing_t}}} walkPx = texture(image_in, uv+d/size).{{{swizzle_vec}}}{{#if max_val}} / max_value {{/if}};
        {{#if is_hsv}}
            vec2 walkPxHv = RGBtoHV(walkPx.rgb);
            vec2 dC = diff_hv(walkPxHv,centrPxHv);
        {{else}}
            {{{processing_t}}} dC = walkPx-centrPx;
        {{/if}}
            float qx2dc = {{#if is_vector_type}}powdot(dC, pw){{else}}pow(abs(dC), pw){{/if}};
            float blurFactor = 1.0 - r / small_radius;
            diffsum += qx2dc*blurFactor;
            blursum += blurFactor;
            dr *= 1.25;
        }
        diffsum /= blursum;
        best_i = diffsum < min_diff ? i : best_i;
        max_diff = max(max_diff, diffsum);
        min_diff = min(min_diff, diffsum);
    }
    float best_disperse = 1.0;
    min_diff = 9999999.0;
    for(float i=best_i-1.5; i < best_i+1.9; i+=0.5) {
        float cosi = cos(i*step);
        float sini = sin(i*step);
        float diffsum = 0.0;
        {{#if is_hsv}}
        vec2 prevWalkPxHv = centrPxHv;
        {{else}}
        {{{processing_t}}} prevWalkPx = centrPx;
        {{/if}}
        float disperse = 0.0;
        for(float r=1; r< radius; r+=1.0) {
            d.x = r * cosi;
            d.y = r * sini;
        {{{processing_t}}} walkPx = texture(image_in, uv+d/size).{{{swizzle_vec}}}{{#if max_val}} / max_value {{/if}};
        {{#if is_hsv}}
            vec2 walkPxHv = RGBtoHV(walkPx.rgb);
            vec2 dC = diff_hv(walkPxHv,centrPxHv);
            disperse += length(diff_hv(walkPxHv,prevWalkPxHv));
            prevWalkPxHv = walkPxHv;
        {{else}}
            {{{processing_t}}} dC = walkPx-centrPx;
            disperse += length(prevWalkPx - walkPx);
            prevWalkPx = walkPx;
        {{/if}}
            float qx2dc = {{#if is_vector_type}}powdot(dC, pw){{else}}pow(abs(dC), pw){{/if}};
            diffsum += qx2dc;
        }
        best_disperse = diffsum < min_diff ? disperse : best_disperse;
        best_i = diffsum < min_diff ? i : best_i;
        max_diff = max(max_diff, diffsum);
        min_diff = min(min_diff, diffsum);
    }

    best_disperse = pow(best_disperse / radius, 0.1);

    float diff_rel = min_diff / max(max_diff, EPSILON);
    float max_possible_diff = small_radius * {{#if is_vector_type}}powdot({{#if is_hsv}}vec2{{else}}vec3{{/if}}(1.0), 1.0){{else}}1.0{{/if}};
    //float fres = 1.0 - exp(-diff_rel);
    float fres = pow(min_diff / max_possible_diff, 0.075);
{{!--
    imageStore(image_inter_res, ivec2({{#if compute}}gl_GlobalInvocationID{{else}}gl_FragCoord{{/if}}.xy), vec4(fres,0,0,0));
    memoryBarrier();

    ivec2[] nh_coords = {ivec2(-1,-1), ivec2(-1,0), ivec2(-1,1), ivec2(0,-1), ivec2(0,1), ivec2(1,-1), ivec2(1,0), ivec2(1,1)};

    min_diff = 9999.0;
    for(int i=0; i<8; i++){
        {{{processing_t}}} walkPx = texture(image_in, uv+vec2(nh_coords[i])/size).{{{swizzle_vec}}}{{#if max_val}} / max_value {{/if}};
        {{#if is_hsv}}
            vec2 walkPxHv = RGBtoHV(walkPx.rgb);
            vec2 dC = walkPxHv-centrPxHv;
        {{else}}
            {{{processing_t}}} dC = walkPx-centrPx;
        {{/if}}
        float qx2dc = {{#if is_vector_type}}powdot(dC, pw){{else}}pow(abs(dC), pw){{/if}};
        best_i = qx2dc < min_diff ? i : best_i;
        min_diff = min(min_diff, qx2dc);
    }

    float best_neighbour_relation = max(1.0 - min_diff, 0.0001);

    float best_neighbour_fres = imageLoad(image_inter_res, ivec2({{#if compute}}gl_GlobalInvocationID{{else}}gl_FragCoord{{/if}}.xy) + nh_coords[best_i]).x;

    fres = min(fres, best_neighbour_fres/best_neighbour_relation);
--}}
    float zBuff = 0.0;
    {{{processing_t}}} aBuff = {{{processing_t}}}(0.0);
    fres = max(fres, EPSILON);
    //int dp = max(1,int(round(min_diff * perimeter / max_diff)));
    int dp = max(1,int(round(perimeter / 20.0)));
    int dpd = dp * 2;
    for (float i = best_i-dp; i<= best_i+dp; i+=1) {
        float cosi = cos(i*step);
        float sini = sin(i*step);
        int maxr = 1+int(float(radius*(dpd-abs(best_i - i))) / float(dpd));
        for(int r = 1; r < maxr; r+=1) {
            d.x = float(r) * cosi;
            d.y = float(r) * sini;
            float blurFactor = exp( -dot(d,d) * invSigmaQx2 ) * invSigmaQx2PI;
            {{{processing_t}}} walkPx = texture(image_in,uv+d/size).{{{swizzle_vec}}}{{#if max_val}} / max_value {{/if}};

       {{#if is_hsv}}
           vec2 walkPxHv = RGBtoHV(walkPx.rgb);
           vec2 dC = diff_hv(walkPxHv,centrPxHv);
           vec2 pw = vec2(0.0);
           pw.x = 2.0;
           pw.y = 0.75;
       {{else}}
           {{{processing_t}}} dC = walkPx-centrPx;
           float pw = 2.0;
       {{/if}}

            //float qx2dc = {{#if is_vector_type}}dot(dC, dC){{else}}(dC * dC){{/if}};
            float qx2dc = {{#if is_vector_type}}powdot(dC, pw){{else}}pow(abs(dC), pw){{/if}};
            float deltaFactor = exp( -qx2dc * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;
            deltaFactor = pow(deltaFactor, 1.0 - best_disperse); //zero disperse - business as usual. Large disperse - have to smooth all with no regret.

            zBuff += deltaFactor;
            aBuff += deltaFactor*walkPx;
        }
    }

    //fres = 1.0;

    {{{output_t}}} result = {{{output_t}}}(0);
    result.{{{swizzle_vec}}} =
    {{#if is_int_type}}
        {{#if is_vector_type}}u{{{processing_t}}}{{else}}uint{{/if}}(round({{#if max_val}} max_value * {{/if}}(aBuff * fres/zBuff + centrPx * (1.0 - fres))));
    {{else}}
        {{#if max_val}}max_value * {{/if}}(aBuff * fres/zBuff + centrPx * (1.0 - fres));
    {{/if}}
//(aBuff * fres/zBuff + centrPx * (1.0 - fres))
    {{#if compute}}
    imageStore(image_out, ivec2(gl_GlobalInvocationID.xy), result);
    {{else}}
    out_result = result;
    {{/if}}
}"
}