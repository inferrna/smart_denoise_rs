vulkano_shaders::shader! {
{{#if compute}}
ty: "compute",
{{else}}
ty: "fragment",
{{/if}}
src: "
#version 450

// Original code by Michele Morrone me@michelemorrone.eu / brutpitt@gmail.com
// https://github.com/BrutPitt/glslSmartDeNoise/blob/master/Shaders/frag.glsl
// This software is distributed under the terms of the BSD 2-Clause license

layout(set = 0, binding = 0) uniform sampler2D image_in;
{{#if compute}}
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(set = 0, binding = 1, {{{output_format}}}) uniform writeonly restrict {{#if is_int_type}}u{{/if}}image2D image_out;
{{else}}
layout(location = 0) out {{{output_t}}} out_result;
{{/if}}

#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439  // 1.0/SQRT_OF_2PI
#define INV_PI          0.31830988618379067153776752674503
const float EPSILON = 1e-10;

layout(push_constant) uniform Parameters {
    uint Width;
    uint Height;
    float sigma;
    float kSigma;
    float threshold;
} params;

vec2 RGBtoHV(in vec3 rgb)
{
    // RGB [0..1] to Hue-Value [0..1]
    // Based on work by Sam Hocevar and Emil Persson
    vec4 p = (rgb.g < rgb.b) ? vec4(rgb.bg, -1., 2. / 3.) : vec4(rgb.gb, 0., -1. / 3.);
    vec4 q = (rgb.r < p.x) ? vec4(p.xyw, rgb.r) : vec4(rgb.r, p.yzx);
    float c = q.x - min(q.w, q.y);
    float h = abs((q.w - q.y) / (6. * c + EPSILON) + q.z);
    return vec2(h, q.x);
}

vec2 diff_hv(vec2 a, vec2 b) {
    vec2 res = abs(a-b);
    res.x = min(1.0-res.x, res.x);
    return res;
}

float powdot(in vec2 data_rgb, in vec2 p) {
    vec2 powered = pow(abs(data_rgb), p);
    return powered.x + powered.y;
}
float powdot(in vec3 data_rgb, in vec3 p) {
    vec3 powered = pow(abs(data_rgb), p);
    return powered.r + powered.g + powered.b;
}
float powdot(in vec4 data_rgba, in vec4 p) {
    vec4 powered = pow(abs(data_rgba), p);
    return powered.r + powered.g + powered.b + powered.a;
}
float powdot(in vec2 data_rgb, in float p) {
    return powdot(abs(data_rgb), vec2(p,p));
}
float powdot(in vec3 data_rgb, in float p) {
    return powdot(abs(data_rgb), vec3(p,p,p));
}
float powdot(in vec4 data_rgba, in float p) {
    return powdot(abs(data_rgba), vec4(p,p,p,p));
}

void main() {
    vec2 size = vec2(textureSize(image_in, 0));
    vec2 uv = vec2({{#if compute}}gl_GlobalInvocationID{{else}}gl_FragCoord{{/if}}.xy) / size; //wSize in original code
    float radius = round(params.kSigma*params.sigma);
    float radQ = radius * radius;

    float invSigmaQx2 = .5 / (params.sigma * params.sigma);      // 1.0 / (sigma^2 * 2.0)
    float invSigmaQx2PI = INV_PI * invSigmaQx2;    // // 1/(2 * PI * sigma^2)

    float invThresholdSqx2 = .5 / (params.threshold * params.threshold);     // 1.0 / (params.sigma^2 * 2.0)
    float invThresholdSqrt2PI = INV_SQRT_OF_2PI / params.threshold;   // 1.0 / (sqrt(2*PI) * params.sigma)

{{#if max_val}}
    const float max_value = float({{{max_val}}});
{{/if}}
    const {{{processing_t}}} centrPx = texture(image_in, uv).{{{swizzle_vec}}}{{#if max_val}} / max_value {{/if}};
{{#if is_hsv}}
    const vec2 centrPxHv = RGBtoHV(centrPx.rgb);
{{/if}}

    vec2 d;
    float zBuff = 0.0;
    {{{processing_t}}} aBuff = {{{processing_t}}}(0.0);

    for (d.x=-radius; d.x <= radius; d.x++) {
        float pt = sqrt(radQ-d.x*d.x);       // pt = yRadius: have circular trend
        for (d.y=-pt; d.y <= pt; d.y++) {
            float blurFactor = exp( -dot(d , d) * invSigmaQx2 ) * invSigmaQx2PI;
            {{{processing_t}}} walkPx = texture(image_in,uv+d/size).{{{swizzle_vec}}}{{#if max_val}} / max_value {{/if}};

{{#if is_hsv}}
            vec2 walkPxHv = RGBtoHV(walkPx.rgb);
            vec2 dC = diff_hv(walkPxHv,centrPxHv);
            vec2 pw = vec2(1.75, 1.5);
{{else}}
            {{{processing_t}}} dC = walkPx-centrPx;
            float pw = 2.0;
{{/if}}

            //float qx2dc = {{#if is_vector_type}}dot(dC, dC){{else}}(dC * dC){{/if}};

            float qx2dc = {{#if is_vector_type}}powdot(dC, pw){{else}}pow(abs(dC), pw){{/if}};

            float deltaFactor = exp( -qx2dc * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;

            zBuff += deltaFactor;
            aBuff += deltaFactor*walkPx;
        }
    }
    {{{output_t}}} result = {{{output_t}}}(0);
    result.{{{swizzle_vec}}} =
    {{#if is_int_type}}
        {{#if is_vector_type}}u{{{processing_t}}}{{else}}uint{{/if}}(round({{#if max_val}} max_value * {{/if}}aBuff/zBuff));
    {{else}}
        {{#if max_val}}max_value * {{/if}}aBuff/zBuff;
    {{/if}}
    {{#if compute}}
    imageStore(image_out, ivec2(gl_GlobalInvocationID.xy), result);
    {{else}}
    out_result = result;
    {{/if}}
}"
}